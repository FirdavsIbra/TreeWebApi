// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tree.DBCodeFirst.DbContexts;

#nullable disable

namespace Tree.DBCodeFirst.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tree.DBCodeFirst.Entities.PlotDb", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("Tree.DBCodeFirst.Entities.TreeDb", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PlotId")
                        .HasColumnType("bigint");

                    b.Property<long>("TreeSortId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlotId");

                    b.HasIndex("TreeSortId");

                    b.ToTable("Trees");
                });

            modelBuilder.Entity("Tree.DBCodeFirst.Entities.TreeSortDb", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("BeginingOfTheHarvestInY")
                        .HasColumnType("float");

                    b.Property<double>("HeightInMetre")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Square")
                        .HasColumnType("float");

                    b.Property<long>("TreeTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TreeTypeId");

                    b.ToTable("TreeSorts");
                });

            modelBuilder.Entity("Tree.DBCodeFirst.Entities.TreeTypeDb", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TreeTypes");
                });

            modelBuilder.Entity("Tree.DBCodeFirst.Entities.TreeDb", b =>
                {
                    b.HasOne("Tree.DBCodeFirst.Entities.PlotDb", "Plot")
                        .WithMany("Trees")
                        .HasForeignKey("PlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tree.DBCodeFirst.Entities.TreeSortDb", "TreeSort")
                        .WithMany()
                        .HasForeignKey("TreeSortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plot");

                    b.Navigation("TreeSort");
                });

            modelBuilder.Entity("Tree.DBCodeFirst.Entities.TreeSortDb", b =>
                {
                    b.HasOne("Tree.DBCodeFirst.Entities.TreeTypeDb", "TreeType")
                        .WithMany("TreeSorts")
                        .HasForeignKey("TreeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeType");
                });

            modelBuilder.Entity("Tree.DBCodeFirst.Entities.PlotDb", b =>
                {
                    b.Navigation("Trees");
                });

            modelBuilder.Entity("Tree.DBCodeFirst.Entities.TreeTypeDb", b =>
                {
                    b.Navigation("TreeSorts");
                });
#pragma warning restore 612, 618
        }
    }
}
